class Node {
    int data;
    Node prev, next;

    Node(int data) {
        this.data = data;
    }
}

class DoublyLinkedList {
    Node head;

    // Insert at end
    void insert(int data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = newNode;
            return;
        }
        Node curr = head;
        while (curr.next != null)
            curr = curr.next;
        curr.next = newNode;
        newNode.prev = curr;
    }

    // Delete a node with given value
    void delete(int value) {
        Node curr = head;
        while (curr != null && curr.data != value)
            curr = curr.next;

        if (curr == null) {
            System.out.println("Element " + value + " not found.");
            return;
        }

        if (curr.prev != null)
            curr.prev.next = curr.next;
        else
            head = curr.next; // deleting head

        if (curr.next != null)
            curr.next.prev = curr.prev;

        System.out.println("Element " + value + " deleted.");
    }

    // Display the list
    void display() {
        Node curr = head;
        System.out.print("List: ");
        while (curr != null) {
            System.out.print(curr.data + " ");
            curr = curr.next;
        }
        System.out.println();
    }
}

public class DoublyLinkedListDemo {
    public static void main(String[] args) {
        DoublyLinkedList list = new DoublyLinkedList();

        list.insert(10);
        list.insert(20);
        list.insert(30);
        list.insert(40);

        System.out.println("Initial List:");
        list.display();

        list.delete(20);

        System.out.println("After Deletion:");
        list.display();
    }
}
